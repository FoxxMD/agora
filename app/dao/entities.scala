package dao

import com.googlecode.mapperdao._
import com.googlecode.mapperdao.utils.{TransactionalSurrogateIntIdCRUD, SurrogateIntIdAll, SurrogateIntIdCRUD}
import models._


/**
 * Created by Matthew on 6/30/2014.
 */
object UserEntity extends Entity[Int, SurrogateIntId, User] {
  val id = key("id") autogenerated (_.id)
  val email = column("email") to (_.email)
  val createdDate = column("createdDate") to (_.createdDate)
  val details = onetoone(UserDetailsEntity) to (_.details)
  val teams = onetomany(TeamUserEntity) foreignkey "teamId" to (_.teams)
  val tournaments = onetomany(TournamentUserEntity) foreignkey "tournamentId" to (_.tournaments)
  val events = onetomany(EventUserEntity) foreignkey "eventId" to (_.events)

  def constructor(implicit m: ValuesMap) = new User(id, email, createdDate, details, teams, events, tournaments) with Stored {
    //override id: Int = UserEntity.id
  }
}


object UserDetailsEntity extends Entity[Int, NoId, UserDetails]{
  val user = onetoone(UserEntity) to (_.user)
  val firstName = column("firstName") to (_.firstName)
  val lastName = column("lastName") to (_.lastName)
  val global = column("globalHandle") to (_.globalHandle)
  val password = column("password") to (_.password)
  val salt = column("salt") to (_.salt)

  def constructor(implicit m: ValuesMap) = new UserDetails(user, firstName, lastName, global, password, salt) with Stored
}

object TeamEntity extends Entity[Int, SurrogateIntId, Team]{
  val id = key("id") autogenerated(_.id)
  val name = column("name") to (_.name)
  val createdDate = column("createdDate") to (_.createdDate)
  val teamPlayers = onetomany(TeamUserEntity) to (_.teamPlayers)
  val games = onetomany(GameEntity) to (_.games)
  val users = onetomany(TeamUserEntity) to (_.teamPlayers)

  def constructor(implicit m: ValuesMap) = new Team(id, name, createdDate, games, teamPlayers) with Stored
}

object TeamUserEntity extends Entity[Int, SurrogateIntId, TeamUser]{
  val id = key("id") autogenerated(_.id)
  val team = manytoone(TeamEntity) to (_.team)
  val user = manytoone(UserEntity) to (_.user)
  val captain = column("isCaptain") to (_.isCaptain)

  def constructor(implicit m: ValuesMap) = new TeamUser(id, team, user, captain) with Stored
}

object GameEntity extends Entity[Int, SurrogateIntId, Game]{
  val id = key("id") autogenerated(_.id)
  val name = column("name") to (_.name)
  val publisher = column("publisher") to (_.publisher)
  val website = column("website") to (_.website)
  val gt = column("gameType") to (theGame => GameType.toString(theGame.gameType))

  def constructor(implicit m: ValuesMap) = {
    val g = GameType.fromString(m(gt))
    new Game(id, name, publisher, website, g) with Stored }
}

object TournamentEntity extends Entity[Int, SurrogateIntId, Tournament]{
  val id = key("id") autogenerated(_.id)
  val bt = key("bracketType") to (tourney => BracketType.toString(tourney.bracketType))
  val rt = key("registrationType") to (tourney => JoinType.toString(tourney.registrationType))
  val game = manytoone(GameEntity) to (_.game)
  val event = manytoone(EventEntity) to (_.event)
  val users = onetomany(TournamentUserEntity) to (_.users)
  val teams = onetomany(TournamentTeamEntity) to (_.teams)

  def constructor(implicit m: ValuesMap) = {
    val j = JoinType.fromString(m(rt))
    val b = BracketType.fromString(m(bt))
    new Tournament(id, b, j, game, event, users, teams) with Stored }
}

object TournamentDetailsEntity extends Entity[Int, NoId, TournamentDetails]{
  val tournament = onetoone(TournamentEntity) to (_.tournament)
  val name = column("name") option (_.name)
  val gamePlayed = column("gamePlayed") option (_.gamePlayed)
  val description = column("description") option (_.description)
  val rules = column("rules") option (_.rules)
  val prizes = column("prizes") option (_.prizes)
  val streams = column("streams") option (_.streams)
  val servers = column("servers") option (_.servers)
  val timeStart = column("timeStart") to (_.timeStart)
  val timeEnd = column("timeEnd") to (_.timeEnd)

  def constructor(implicit m: ValuesMap) = new TournamentDetails(tournament, name, gamePlayed, description, rules, prizes, streams, servers, timeStart, timeEnd) with Stored
}

object TournamentUserEntity extends Entity[Int, SurrogateIntId, TournamentUser]{
  val id = key("id") autogenerated(_.id)
  val tournament = manytoone(TournamentEntity) to (_.tournament)
  val user = manytoone(UserEntity) to (_.user)
  val isPresent = column("isPresent") to (_.isPresent)

  def constructor(implicit m: ValuesMap) = new TournamentUser(id, tournament, user, isPresent) with Stored
}

object TournamentTeamEntity extends Entity[Int, SurrogateIntId, TournamentTeam]{
  val id = key("id") autogenerated(_.id)
  val tournament = manytoone(TournamentEntity) to (_.tournament)
  val team = manytoone(TeamEntity) to (_.team)
  val isPresent = column("isPresent") to (_.isPresent)

  def constructor(implicit m: ValuesMap) = new TournamentTeam(id, tournament, team, isPresent) with Stored
}

object EventEntity extends Entity[Int, SurrogateIntId, Event]{
  val id = key("id") autogenerated(_.id)
  val name = column("name") to (_.name)
  val eventType = column("eventType") to (event => JoinType.toString(event.eventType))
  val details = onetoone(EventDetailsEntity) to (_.details)
  val users = onetomany(EventUserEntity) to (_.users)
  val tournaments = onetomany(TournamentEntity) to (_.tournaments)
  val games = manytomany(GameEntity) to (_.games)

  def constructor(implicit m: ValuesMap) = {
    val e = JoinType.fromString(m(eventType))
    new Event(id, name, e, details, users, tournaments, games) with Stored}
}

object EventDetailsEntity extends Entity[Int, NoId, EventDetails]{
  val event = onetoone(EventEntity) to (_.event)
  val address = column("address") option (_.address)
  val city = column("city") option (_.city)
  val state = column("state") option (_.state)
  val description = column("description") option (_.description)
  val rules = column("rules") option (_.rules)
  val prizes = column("prizes") option (_.prizes)
  val streams = column("streams") option (_.streams)
  val servers = column("servers") option (_.servers)
  val timeStart = column("timeStart") to (_.timeStart)
  val timeEnd = column("timeEnd") to (_.timeEnd)

  def constructor(implicit m: ValuesMap) = new EventDetails(event, address, city, state, description, rules, prizes, streams, servers, timeStart, timeEnd) with Stored
}

object EventUserEntity extends Entity[Int, SurrogateIntId, EventUser]{
  val id = key("id") autogenerated(_.id)
  val event = manytoone(EventEntity) to (_.event)
  val user = manytoone(UserEntity) to (_.user)
  val isPresent = column("isPresent") to (_.isPresent)

  def constructor(implicit m: ValuesMap) = new EventUser(id, event, user, isPresent) with Stored
}